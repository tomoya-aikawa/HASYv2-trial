import os
from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D, Conv2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator

nb_epoch = 50

result_dir = 'results'
if not os.path.exists(result_dir):
    os.mkdir(result_dir)

def save_history(history, result_file):
    loss = history.history['loss']
    acc = history.history['acc']
    val_loss = history.history['val_loss']
    val_acc = history.history['val_acc']
    nb_epoch = len(acc)

    with open(result_file, "w") as fp:
        fp.write("epoch\tloss\tacc\tval_loss\tval_acc\n")
        for i in range(nb_epoch):
            fp.write("%d\t%f\t%f\t%f\t%f\n" % (i, loss[i], acc[i], val_loss[i], val_acc[i]))


if __name__ == '__main__':
    classes = [
        '+',
        '-',
        '0',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '<',
        '>',
        'A',
        'B',
        'C',
        'D',
        'E',
        'F',
        'G',
        'H',
        'I',
        'J',
        'K',
        'L',
        'M',
        'N',
        'O',
        'P',
        'Q',
        'R',
        'S',
        'T',
        'U',
        'V',
        'W',
        'X',
        'Y',
        'Z',
        '[',
        '\\#',
        '\\$',
        '\\%',
        '\\&',
        '\\Downarrow',
        '\\Im',
        '\\L',
        '\\Leftrightarrow',
        '\\Longleftrightarrow',
        '\\Longrightarrow',
        '\\O',
        '\\Re',
        '\\S',
        '\\aa',
        '\\ae',
        '\\aleph',
        '\\alpha',
        '\\amalg',
        '\\angle',
        '\\approx',
        '\\ast',
        '\\astrosun',
        '\\asymp',
        '\\backsim',
        '\\backslash',
        '\\barwedge',
        '\\because',
        '\\beta',
        '\\between',
        '\\blacksquare',
        '\\blacktriangleright',
        '\\bot',
        '\\bowtie',
        '\\boxdot',
        '\\boxplus',
        '\\boxtimes',
        '\\bullet',
        '\\cap',
        '\\cdot',
        '\\celsius',
        '\\checked',
        '\\checkmark',
        '\\chi',
        '\\circ',
        '\\circlearrowleft',
        '\\circlearrowright',
        '\\circledR',
        '\\circledast',
        '\\circledcirc',
        '\\clubsuit',
        '\\cong',
        '\\coprod',
        '\\copyright',
        '\\cup',
        '\\curvearrowright',
        '\\dag',
        '\\dashv',
        '\\ddots',
        '\\degree',
        '\\delta',
        '\\diameter',
        '\\diamond',
        '\\diamondsuit',
        '\\div',
        '\\doteq',
        '\\dots',
        '\\dotsc',
        '\\ell',
        '\\emptyset',
        '\\epsilon',
        '\\equiv',
        '\\eta',
        '\\exists',
        '\\female',
        '\\fint',
        '\\flat',
        '\\forall',
        '\\frown',
        '\\fullmoon',
        '\\gamma',
        '\\geq',
        '\\geqslant',
        '\\gtrless',
        '\\gtrsim',
        '\\guillemotleft',
        '\\hbar',
        '\\heartsuit',
        '\\hookrightarrow',
        '\\iddots',
        '\\in',
        '\\infty',
        '\\int',
        '\\iota',
        '\\kappa',
        '\\lambda',
        '\\langle',
        '\\lceil',
        '\\leadsto',
        '\\leftarrow',
        '\\leftmoon',
        '\\leq',
        '\\leqslant',
        '\\lesssim',
        '\\lfloor',
        '\\lhd',
        '\\lightning',
        '\\llbracket',
        '\\longmapsto',
        '\\lozenge',
        '\\ltimes',
        '\\male',
        '\\mapsfrom',
        '\\mapsto',
        '\\mars',
        '\\mathbb{1}',
        '\\mathbb{H}',
        '\\mathbb{N}',
        '\\mathbb{Q}',
        '\\mathbb{R}',
        '\\mathbb{Z}',
        '\\mathcal{A}',
        '\\mathcal{B}',
        '\\mathcal{C}',
        '\\mathcal{D}',
        '\\mathcal{E}',
        '\\mathcal{F}',
        '\\mathcal{G}',
        '\\mathcal{H}',
        '\\mathcal{L}',
        '\\mathcal{M}',
        '\\mathcal{N}',
        '\\mathcal{O}',
        '\\mathcal{P}',
        '\\mathcal{R}',
        '\\mathcal{S}',
        '\\mathcal{T}',
        '\\mathcal{U}',
        '\\mathcal{X}',
        '\\mathcal{Z}',
        '\\mathds{1}',
        '\\mathds{C}',
        '\\mathds{E}',
        '\\mathds{N}',
        '\\mathds{P}',
        '\\mathds{Q}',
        '\\mathds{R}',
        '\\mathds{Z}',
        '\\mathfrak{A}',
        '\\mathfrak{M}',
        '\\mathfrak{S}',
        '\\mathfrak{X}',
        '\\mathscr{A}',
        '\\mathscr{C}',
        '\\mathscr{D}',
        '\\mathscr{E}',
        '\\mathscr{F}',
        '\\mathscr{H}',
        '\\mathscr{L}',
        '\\mathscr{P}',
        '\\mathscr{S}',
        '\\mathsection',
        '\\mid',
        '\\models',
        '\\mp',
        '\\mu',
        '\\multimap',
        '\\nRightarrow',
        '\\nabla',
        '\\nearrow',
        '\\neg',
        '\\neq',
        '\\nexists',
        '\\ni',
        '\\nmid',
        '\\not\\equiv',
        '\\notin',
        '\\nsubseteq',
        '\\nu',
        '\\nvDash',
        '\\odot',
        '\\ohm',
        '\\oiint',
        '\\oint',
        '\\omega',
        '\\ominus',
        '\\oplus',
        '\\otimes',
        '\\parallel',
        '\\parr',
        '\\partial',
        '\\perp',
        '\\phi',
        '\\pi',
        '\\pitchfork',
        '\\pm',
        '\\pounds',
        '\\prec',
        '\\preccurlyeq',
        '\\preceq',
        '\\prime',
        '\\prod',
        '\\propto',
        '\\psi',
        '\\rangle',
        '\\rceil',
        '\\rfloor',
        '\\rho',
        '\\rightarrow',
        '\\rightharpoonup',
        '\\rightleftarrows',
        '\\rightleftharpoons',
        '\\rightrightarrows',
        '\\rightsquigarrow',
        '\\rrbracket',
        '\\rtimes',
        '\\searrow',
        '\\setminus',
        '\\sharp',
        '\\shortrightarrow',
        '\\sigma',
        '\\sim',
        '\\simeq',
        '\\slash',
        '\\sphericalangle',
        '\\sqcap',
        '\\sqcup',
        '\\sqrt{}',
        '\\sqsubseteq',
        '\\square',
        '\\ss',
        '\\star',
        '\\subset',
        '\\subseteq',
        '\\subsetneq',
        '\\succ',
        '\\succeq',
        '\\sum',
        '\\sun',
        '\\supset',
        '\\supseteq',
        '\\tau',
        '\\therefore',
        '\\theta',
        '\\times',
        '\\top',
        '\\triangle',
        '\\triangledown',
        '\\triangleleft',
        '\\trianglelefteq',
        '\\triangleq',
        '\\triangleright',
        '\\twoheadrightarrow',
        '\\uparrow',
        '\\upharpoonright',
        '\\uplus',
        '\\varepsilon',
        '\\varkappa',
        '\\varnothing',
        '\\varoiint',
        '\\varphi',
        '\\varpi',
        '\\varpropto',
        '\\varrho',
        '\\varsubsetneq',
        '\\vartheta',
        '\\vartriangle',
        '\\vdash',
        '\\vdots',
        '\\vee',
        '\\venus',
        '\\wedge',
        '\\with',
        '\\wp',
        '\\wr',
        '\\xi',
        '\\zeta',
        '\\{',
        '\\|',
        '\\}',
        ']',
        '|',
    ]

    model = Sequential()
    model.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3)))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

    model.add(Conv2D(64, (3, 3)))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

    model.add(Flatten())
    model.add(Dense(1024))
    model.add(Activation('tanh'))
    model.add(Dropout(0.5))
    model.add(Dense(len(classes)))
    model.add(Activation('softmax'))

    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    # model.compile(loss='kullback_leibler_divergence',
    #               optimizer='adam',
    #               metrics=['accuracy'])

    train_datagen = ImageDataGenerator(rescale=1.0 / 255)

    test_datagen = ImageDataGenerator(rescale=1.0 / 255)

    train_generator = train_datagen.flow_from_directory(
        'data/train',
        classes=classes,
        target_size=(32, 32),
        batch_size=32,
        class_mode='categorical')

    test_generator = train_datagen.flow_from_directory(
        'data/validation',
        classes=classes,
        target_size=(32, 32),
        batch_size=32,
        class_mode='categorical')

    validation_generator = test_datagen.flow_from_directory(
        'data/validation',
        target_size=(32, 32),
        batch_size=32,
        class_mode='categorical')

    # 訓練
    history = model.fit_generator(
        train_generator,
        samples_per_epoch=2000,
        nb_epoch=nb_epoch,
        validation_data=validation_generator,
        nb_val_samples=800)

    # 結果を保存
    model.save_weights(os.path.join(result_dir, 'weights.h5'))
    save_history(history, os.path.join(result_dir, 'history.txt'))

    loss, acc = model.evaluate_generator(test_generator, val_samples=800)
    print('Test loss:', loss)
    print('Test acc:', acc)
